1. break
반복문 내에서 정상적인 경우보다 일찍 반복 실행을 중단하기 위해서 break를 사용했다. 
직접적으로 호출된 반복문이 중단이 된다. 
ex) 중첩된 2개의 반복문이 있다.(바깥 반복문 & 안쪽 반복문)
안쪽의 반복문에서 break를 사용한다면 안쪽의 반복문은 사용이 중지되지만 바깥의 반복문은 계속 실행된다. 
하지만 바깥의 반복문에서 break를 사용하게 된다면, 안쪽의 반복문의 바깥의 반복문에 의해 실행이 되기 때문에 바깥에서 break를 사용하게 되면 안쪽의 반복문도 멈춘다. 
(안쪽 반복문은 바깥쪽 반복문의 각 반복에 대해서만 실행이 되기 때문이다.)

2. continue 
continue는 전체 반복문을 중단시키지 않고 다음 반복으로 넘어가기만 한다. 

break와 continue는 반복문에 대한 추가적 제어가 가능하도록 해준다. 

break와 continue의 마지막 기능 : 레이블
반복문은 이름을 정할 수가 있다.
let j = 0;
outerWhile: do{
  console.log('Outer', j);
  innerfor: for(let k = 0; k < 5; k++){
    if(k===3){
      break outerWhile; // 이렇게 break뒤에 외부반복문에 부여한 레이블의 이름을 전달하게 된다면 외부 반복문이 중단된다. --> 현재 속한 반복문이 아닌 다른 반복문을 멈출 수 있다. 
      continue outerWhile; // 이처럼 continue도 사용이 가능하다. 
    }
    console.log('Inner', k);
  }
  j++;
}while(j<3)
여기서 처럼 do-while의 반복문의 이름은 outerWhlie로 정했다. 
반복문에 레이블을 부여하고 break 및 continue와 함께 사용한다. 
