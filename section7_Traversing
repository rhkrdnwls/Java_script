DOM traversing
: 관심이 있는 모든 요소를 수동으로 선택하는 것이 아니라 이미 선택한 요소를 이용해서 이 요소를 기반으로 자식 혹은 형제 요소들으로 옮겨갈 수 있다

1. Child
항상 직접적인 자식 노드, 요소 노드가 된다. 
<div>
  <p>  
    A<em>test!</em>
  </p>
</div>
<p>는 <div>의 자식이다. 
<em>, 강조 태그는 자식이 아니다. 내포되어 있긴 하지만 직접적인 자식이 아니다. 
2. Descendant
직접 또는 간적적인 자식 노드(요소)를 의미한다. 
<p>와 <em>둘다 <div>의 후손이다.
3. Parent
직접적인 부모 노드/요소 이다. 
4. Ancestor
직접/간접적인 부모 관계이다. 

한 요소의 주변 혹은 중첩된 요소, 노드를 탐색할라고 하는데 몇가지 방향을 취할 수 있다. 위로 올라가서 만날 노드는 (부모, 조상으로 가는 노드)
parentNode/parentElement이며 이들은 특정 프로퍼티를 가지게 된다. 
parentNode는 모든 부모 노드를 선택하며
parnetElement는 부모 노드이자 부모 요소를 선택한다., 부모 HTML요소를 가지게 된다. 
closest() 메서드도 사용이 가능한데, 직접적인 부모 말고 특정 CSS 쿼리와 일치하는 모든 조상을 사용하는 메서드다.

자식이나 후손 노드에 도달할 수 있는 메서드 : childNodes / children 프로퍼티가 있다. 
childNodes : 텍스트 노드를 포함한 모든 자식 노드를 선택한다. 
children : 자식 요소 노드인 HTML 요소 객체만 선택한다.

firstChild, lastChild : 첫번째 / 마지막 자식 노드
firstElementChild, lastElementChild : 주어진 요소에서 첫번째/마지막 자식 노드를 선택 

previousSibling, nextSibling : 노드 제
previousElementSibling, nextElementSibling : 같은 레벨에 머물면서 형제 요소가 확인 가능한 메서드 

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

  <body>
    <header><h1 id="main-title">Dive into the DOM!</h1></header> <!-- id도 넣었다 h1 태그에 
      순서 없는 목록을 생성할 수 있는 키워드이다 ul은 */ -->
    <ul> 
      <li class="list-item">Item 1</li>
      <li class="list-item">Item 2</li>   <!-- 아이템2와 3에는 저런식으로 특정 클래스 부여도 가능하다. -->
      <li class="list-item">Item 3</li>
    </ul>
    <input type="text" value="dafault value">
  </body>
여기에서 Element node는 <body>, <ul>, <header>, <li class="list=item"> 이런것이고 
Text Node는 item 1, dive into the Dom, <header>앞에 있는 공백 다 포함 된다.



이 예시에서 만약 2번째 list item을 가지고 싶다면 어떻게 해야할까?
1. document.querySelector('.list-item') --> 안된다. 저거는 클래스가 list-item인것 중에 첫번째인 값을 배출하기 때문에 두번째에 있는 list-item은 나오지 않는다.
해결방법은: 저 요소의 부모 노드인 ul에 접근을 해서 자식 요소를 살펴본뒤, 두번째 자식을 살펴보면 된다. 
const ul = document.querySelector('ul'); --> 이 문서에서 ul은 하나밖에 없으므로 ul에 접근이 가능하다. 
ul.children을 사용한다면 HTML collection이 보이게 된다. 이는 결국 유사 객체 배열로 실제 배열은 아니지만 반복문을 지원한다.
ul.children[1] --> 우리가 원하는 두번째 list-item을 얻을 수 있다.

저기서 ul.children을 사용하지 않고 ul.childNodes를 사용한다면 텍스트 노드와 요소 노드가 다 나오게 된다. 모든 자식 노드를 선택했기 떄문이다. (children은 자식 요소 노드만 포함한다., childNodes는 텍스트 노드도 포함한다.)

ul.lastElementChild를 통해 마지막 요소 자식 노드를 얻을 수 있다.
ul.lastChild를 사용한다면 마지막 자식 요소인 텍스트 노드를 얻을 수 있다.


만일 자식노드에서 부모 노드로 접근이 하고 싶을 경우에는 parentNode를 사용하는데 parents나 parentNodes처럼 뒤에 s를 붙이지 않는다. 각 요소, 노드는 하나의 부모님만을 가지기 때문이다. 
여러 자식 요소 또는 자식 노드를 가질 수 있지만 하나 이상의 부모 요소 또는 부모 노드를 가질 수 없다. 
parentNode -> 가장 가까운 부모 노드
parentElementv -> 가장 가까운 부모 요소 노드에 접근한다.
위 두 메서드로는 다른 조상이 아닌, 오직 가장 가까운 부모에 접근할 수 있다. 
다른 조상에 접근하기 위해서는 closest를 사용할 수 있다.
closest는 quertSelector와 같이 CSS 선택자를 이용한다. 

같은 수준에 위치하는 것은 형제 노드라고 한다.
이에 접근 하기 위해서는 previousSibling  / previousElementSibling 
previousElementSibling을 쓰면 가장 가까운 요소 노드를 알려준다.
previousSibling은 텍스트 노드가 나올 수도 있고 공백이 나올 수도 있다.
