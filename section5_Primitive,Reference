Primitive(원시 값) vs Reference(참조 값)types

Primitive type
: Strings, Numbers, Booleans, null, undefined, Symbol
내가 만드는 모든 숫자는 변수로 저장되어 계산에 사용된다.
메모리, 주로 스택에, 저장된다.(원시값은 실행시간이 긴 경우에는 힙으로 저장될 수도 있기 때문이다.)

Reference
: 참조값은 갑 자체를 저장하는 것이 아닌 메모리 공간의 주소를 저장한다. 
힙 어딘가에 저장된 값 대신에 메모리 공간의 주소를 저장한다. (이 메모리 공간을 가르키는 포인터라고 할 수 있다.)

let hobbies = ['Sports'];
let newHobbies = hobbies;

hobbies.push('cooking');

hobbies --> ['Sports', 'Cooking']
newHobbies --> ['Sports', 'Cooking']

newHobbies에도 값을 push하지 않아도 값이 푸쉬가 되었다. 
hobbies를 newHobbies에 할당할때 포인터만을 복사했기 떄문이다. (해당 배열의 주소만을 복사했다)
--> 요소 자체, 값 자체, 배열 자체는 복사되지 않았다. 오로지 주소
--> 한 배열을 바꿀때 다른 배열도 자동으로 바뀐다.
메모리의 한 배열을 가르키기 때문이다. 
변수 2개가 같은 메모리 공간을 가르킨다. 
- 객체도 마찬가지 이다.  

그 전체를 복사하고 싶다면 

let yetAnotherPerson = {...person} (객체의 경우)
person의 모든 키-값 쌍을 가져와 새로운 객체의 키-값 쌍에 추가한다. 실제로 복사하는 것이다. 
person의 값을 바꿔도 이러면 yetAnotherPerson의 값은 바뀌지 않는다.

배열의 경우
let hobbies = ['Sports'];
let moreHobbies = [...hobbies];

-- 같은 데이터를 가지고 있더라도 두개의 다른 주소를 가지고 있기 떄문에 같지 않다.  

const hobbies = ['Sports'];
hobbies.push('Cooking');
hobbies --> ['Sports', 'Cooking']
여기서 const가 저장하고 있는 것은 이 배열의 주소이다. 
주소는 바뀌지 않았으므로 상수의 값은 바껴도 된다.
