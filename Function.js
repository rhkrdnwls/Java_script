함수(function)
--> 온디멘드형 코드이다.(code on demand)
내가 추후에 실행할 수 있는 코드를 정의하게 해준다. 

함수 생성
--> funciton이라는 키워드를 사용한다. 
function greeting() {
    alert("greeting");
}
--> greeting이라는 함수를 생성한다.(greeting의 괄호 안에는 함수가 받을 수 있는 매개변수가 들어간다.)
--> 중괄호 사이에는 추후에 실행하고자 하는 코드의 함수 본문이 온다. (여기서는 함수가 호출되었을때, greeting이라는 문자열을 출력한다.)
--> 실행할 무언가가 아니라 반환하고자 하는 값이 와도 된다. (return 10과 같이)

-함수가 호출이 되면, 함수 안에 있는 내용이 출력이 된다. 
-만일 함수가 매개변수를 필요로 한다면, 호출을 할때 매개변수에 들어갈 값도 적어준다. 

-함수를 사용한다면 나중에 실행되어야할 코드를 정의할 수 있다.(즉시 실행되지 않을 코드를 작성하게 해준다.)
-함수 뒤에는 세미콜론을 사용하지 않는다. 

- return 키워드
return result;
--> result에 저장된 값을 반환한다.
--> 그리고 이 값을 변수에 저장할 수 있다. 

function greeting(a) {
  return a;
}

let num = greeting(10);

--> 이렇게 하면 greeting 함수를 매개변수 10과 함께 호출을 하고 그로 인해 반환 되는 10을 num이라는 변수에 저장한다. 

- 변수와 상수는 사용하기 전에 선언 해야한다. let과 const의 경우에는 한번만 선언이 가능하다.

함수 외부/내부의 차이점.
전역적으로 정의가 된 변수와 상수에는 함수 내부에서도 사용이 가능하다.
하지만, 함수 내부에서 정의된 변수와 상수는 함수 외부에서 사용이 불가하다. 
(함수 내부에서 상수나 변수를 정의하는 것은 로컬/블록 스코프라고 한다.)
(해당 블록 안에서만 사용이 가능하다.)


(1)
let user = 'a';
let user = 'b';
이렇게 쓰는 것은 혀용되지 않는다. 
전역변수로 user를 이미 선언을 하면, 같은 범위 내에서 user을 또 선언하는 것은 허용되지 않는다. 

(2)
let user = 'a';
function greeting(name){
  let user = name;
}
이는 허용이 된다. 
전역변수로 user를 선언했지만, 다음으로 선언된 user는 전역의 범위가 아닌 greeting이라는 함수 내의 범위에서 선언이 되었기 때문이다. 


function returnFuc(a){
  return 0;
  let name = a;
}
let num = returnFuc(10);
alert(num);
을 한다면  num은 0이 된다.
왜냐하면 return문 이후에 나오는 코드는 실행되지 않고 function이 끝나기 떄문이다. 
  

