Rest 연산자
Rest 연산자는 스프레드 연산자와 비슷하게 ...을 사용하는데 위치가 다르다. 
스프레드 연산자 : 객체나 배열을 생성할때 사용한다. 기존의 객체 / 배열을 취해 모든 키-값 쌍과 배열의 요소를 가져와서 새거에 추가한다.
Rest 연산자 : ...을 매개변수 리스트에 사용한다. 배열의 요소를 가져오는 대신 이 함수가 얻는 모든 인수를 원하는 만큼 가져와서 배열에 합친다. 

const sumUp = (...numbers) => { // Rest 연산자 
    let sum = 0;
    for(const num of numbers) {
        sum += num;
    }
    return sum;
};

console.log(sumUp(1, 2, 10, 9, 8));
console.log(sumUp(1, 99, 92, 32));

1. Rest 연산자는 항상 리스트의 마지막 인수여야 한다.(Rest 연산자 앞에는 매개변수가 있어도 된다.)
2. Rest 연산자는 무조건 1개만 있어야 한다. 
3. 화살표 함수가 아니라 function 키워드를 활용한 함수에도 Rest 연산자를 활용할 수가 있다.

- function 키워드로 생성한 함수에서는 Rest 매개변수 말고 특별한 변수가 사용이 가능하다, 바로 arguments 변수이다. 
const subtractUp = function() {
    let sum = 0;
    for(const num of arguments) { // Don't use(주로 Rest를 많이 쓰는거 같다.
        sum -= num;
    }
    return sum;
};
1. arguments는 키워드로 표시가 된다.
2. 이는 함수 안에서 사용할 수 있지만 function 키워드를 사용하는 함수 안에서만 사용이 가능하다. 
3. 배열과 비슷한 객체를 제공한다. (실제 배열은 아니지만 함수에서 얻은 모든 인수의 배열과 비슷하다.)

-함수 안에 함수 생성이 가능하다. 이렇게 생성이 된 함수는 그 함수 내에서만 사용이 가능하다.

- 콜백 함수 : 무언가에 의해 불러와지는 함수를 뜻한다.(언제 호출되는 지를 정할 수 없고 미래의 특정 시점에 불려온다.)
예시에서 종종 보는 addEventListener도 콜백함수이다. (클릭에 의해 뒤에 있는 함수가 실행이 되기 때문이다.)

const sumUp = (resultHandler,...numbers) => { // Rest 연산자 
    let sum = 0;
    for(const num of numbers) {
        sum += num;
    }
    resultHandler(sum);
};
const showResult = (result) => {
    alert('The result after adding all numbers is: ' + result);
}
sumUp(showResult, 1, 2, 10, 9, 8);
이게 콜백 함수의 예문이다.

-----------------------------------------------------------------------------------------------------------------
bind
.bind로 함수 객체에 대한 메서드를 호출하고 이를 실행하게 되면 bind는 새로운 함수를 생성해준다. 
받은 인자에 따라 사전에 구성된 새로운 함수, 새로운 참조가 생성이 된다.
--> 즉시 실행되지 않는 함수를 생성할 수 있다. 

bind는 최소 두개의 인자를 쓴다. 첫번째 키워드에는 this라는 키워드를 넣는다. 
두번째 인자부터 사전 구성하고 싶은 첫번째 매개변수를 넣는데, 원하는 만큼 넣을 수 있다.(함수가 지원하는 한에서)

resultHandler(sum);

const showResult = (messageText, result) => {
    alert(messageText + ' ' + result);
}
combine(showResult.bind(this, 'The result after subtracting all numbers is:'), 'SUBTRACT', 1, 2, 10, 9, 8);

이렇게 된다면 bind의 특성상
바인드하고 고유의 인자를 설정하게 되면 (여기서는 'The result after subtracting all numbers is:' 이부분이 showResult의 첫번째 매개변수인 messageText로 보내지고 
resultHandler에서 호출되는 sum은 고유의 구성된 인자 뒤로 오게 된다. (자동으로 매개변수의 끝으로 붙게 된다.)

---------------------------------------------------------------------------------------------------------------------------
function calculationResult(calculationType) {
    const enteredNumber = getUserInput();
    const initialResult = currentResult;
    let operater;
    if(calculationType === 'ADD') {
        currentResult += enteredNumber;
        operater = '+';
    } // if문의 중괄호 뒤에도 세미콜론을 붙이지 않는다. 
    else if(calculationType === 'SUBTRACT') {
        currentResult -= enteredNumber;
        operater = '-';
    }
    else if(calculationType === 'MULTIPLY'){
        currentResult *= enteredNumber;
        operater = '*';
    }
    else if(calculationType === 'DIVIDE') {
        currentResult /= enteredNumber;
        operater = '/';
    }
    createAndWriteOutput(operater, initialResult, enteredNumber);
    writeToLog(calculationType, initialResult, enteredNumber, currentResult);
}

addBtn.addEventListener('click', calculationResult.bind(this, 'ADD'));
// 여기서 calculation('ADD')라고 하면 자바스크립트가 이 함수를 미리 호이스팅 한다. 우리는 이 함수가 맨처음에 실행되는것을 원치 않기 때문에 
// 바인드를 통해 특정한 시점에 실행되도록 막을 수가 있다.
subtractBtn.addEventListener('click', calculationResult.bind(this, 'SUBTRACT'));
multiplyBtn.addEventListener('click', calculationResult.bind(this, 'MULTIPLY'));
divideBtn.addEventListener('click', calculationResult.bind(this, 'DIVIDE'));
