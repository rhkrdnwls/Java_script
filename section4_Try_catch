코드를 작성할때 오류를 발생시키거나 에러가 났을떄 try-catch 구문을 통해 오류 메세지를 띄울 수 있다.   
throw : 새로운 오류를 만드는 키워드이다 + 무엇이든 오류가 될 수 있다. 
숫자나 문자열, 혹은 객체도 오류가 될 수 있다. 
throw {message : 'Invalid user input, not a number'}; (메세지 프로퍼티의 객체를 오류로 발생시킨다.  대부분의 오류는 메서지 프로퍼티가 있는 오류이다.)

try - catch는 어떻게 사용해야 할까: 바로 실패할 수 있는 코드에 try - catch를 맵핑한다. 
오류 발생 여부를 제어할 수 없는 부분만 try에 맵핑 해야 한다.  
function getMaxLifeValues() {
    const enrteredValue = prompt("Please enter the Maximum life", '100'); // 파이썬의 input 함수와 동일하다. 
    const parsedValue = parseInt(enrteredValue);
    if(isNaN(parsedValue) || parsedValue < 0){
        throw {message : 'Invalid user input, not a number'};
    }
    return parsedValue;
}
let chosenMaxLife

try{
    chosenMaxLife= getMaxLifeValues();
}catch(error) { // 여기에 있는 error는 catch 구문에 의해 잡힌 오류를 사용할 수 있다. 
    console.log(error); // 받은 error를 console에 띄워서 오류내에 어떤 내용이 있었는지 확인이 가능하다. 
    chosenMaxLife = 100; // error가 나면 catch부분이 실행이 되므로 chosenMaxLife를 지정하지 않은 경우에 지정이 가능하다. 
}
- finally
try와 try-catch와 함께 사용이 가능한 방법(try는 무조건 있어야 한다. -> (try, finally) , (try, catch ,finally), (try, catch)이렇게 3개의 경우가 있다.)
